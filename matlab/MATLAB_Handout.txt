MATLAB Demo
    Authors: Benjamin Mayes
             Gian Biondi

>> 5 + 4 % The command window is a glorified REPL

ans =

     9

>> ans + ans

ans =

    18

>> ans * ans; % We can hide the result by including the semi-colon.
>> ans

ans =

   324

>> v = [1 2 3 4] % Lets make a row vector.

v =

     1     2     3     4

>> size(v) % What is its size?

ans =

     1     4

>> [rows cols] = size(v) % The size itself is a matrix!

rows =

     1


cols =

     4

>> size(5) % Even a number is considered a 1x1 matrix.

ans =

     1     1

>> [1 2; 3 4] % Syntax for multirow matrix

m =

     1     2
     3     4

>> eye(3) % identity matrix

ans =

     1     0     0
     0     1     0
     0     0     1

>> inv(m) % Find the inverse of a matrix.

minv =

   -2.0000    1.0000
    1.5000   -0.5000

>> minv*m % This should equal eye(2)

ans =

    1.0000         0
    0.0000    1.0000

>> [v v] % Vectors can be easily concatenated

ans =

     1     2     3     4     1     2     3     4

>> m = [v;v+v] % Or used as row vectors in a matrix (if their column counts match)

m =

     1     2     3     4
     2     4     6     8

>> [m m] % Any matrix can be used (if their row counts match)

n =

     1     2     3     4     1     2     3     4
     2     4     6     8     2     4     6     8

>> [n; transpose(n)] % Clearly combining these two matrices in this way would not produce a sensible answer.
Error using vertcat
CAT arguments dimensions are not consistent.
>> [v ; transpose(v) transpose(v)] % However, if we make the dimensions match everything works as expected.

ans =

     1     2     3     4
     2     4     6     8
     1     2     1     2
     2     4     2     4
     3     6     3     6
     4     8     4     8

>> m = magic(5) % 5x5 matrix with all rows/cols/diagonals equal in sum.

m =

    17    24     1     8    15
    23     5     7    14    16
     4     6    13    20    22
    10    12    19    21     3
    11    18    25     2     9

>> m(1,3) % Access third element in the first row.

ans =

     1

>> m(1,1:5) % Access the first row as a vector.

ans =

    17    24     1     8    15

>> m(2:4,2:4) % Access a sub-matrix.

ans =

     5     7    14
     6    13    20
    12    19    21

>> m(2:4,2:4) = [1 2 3;4 5 6; 7 8 9] % We can also modify it!

m =

    17    24     1     8    15
    23     1     2     3    16
     4     4     5     6    22
    10     7     8     9     3
    11    18    25     2     9

>> 0:10 % we can easily construct a vector using ranges

ans =

     0     1     2     3     4     5     6     7     8     9    10

>> 0:0.5:1 % the step value can also be specified

ans =

         0    0.5000    1.0000

>> x = @(r,c) repmat(c*transpose(0:(r-1)),1,c)+repmat(0:(c-1),r,1)
% An anonymous function. repmat(M,r,c) creates a matrix containing r*c copies of the given matrix.

x = 

    @(r,c)repmat(c*transpose(0:(r-1)),1,c)+repmat(0:(c-1),r,1)

>> x(4,4)

ans =

     0     1     2     3
     4     5     6     7
     8     9    10    11
    12    13    14    15

>> x(4,6)

ans =

     0     1     2     3     4     5
     6     7     8     9    10    11
    12    13    14    15    16    17
    18    19    20    21    22    23

>> x(6,3)

ans =

     0     1     2
     3     4     5
     6     7     8
     9    10    11
    12    13    14
    15    16    17

>> f = @(x)x*x % An anonymous function.

f = 

    @(x)x*x

>> f(5)

ans =

    25

>> arrayfun(f,v) % Let's apply it to our vector.

ans =

     1     4     9    16

>> f = @(x)arrayfun(@(x)x*x,x) % An alternate way of writing the function.

f = 

    @(x)arrayfun(@(x)x*x,x)

>> f(v) % Now it accepts vectors (and matrices)

ans =

     1     4     9    16

>> f(5) % And single elements.

ans =

    25

>> X = 0:pi/180:2*pi; % Obtain all values between 0 and 2pi with a step of pi/180.
>> Y = sin(X); % Apply sin to each value in X and store in Y.
>> plot(X,Y) % create a plot containing points (X(1),Y(1)), (X(2),Y(2)),...
